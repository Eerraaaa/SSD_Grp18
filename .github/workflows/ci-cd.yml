name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mysqli, pdo, pdo_mysql
        tools: composer
        
    - name: Install PHP dependencies
      run: |
        cd php
        composer install --no-dev --optimize-autoloader
        
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      
    - name: Run Composer security check
      run: |
        cd php
        composer audit --format=json --no-interaction
        
    - name: Run Semgrep SAST scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/owasp-top-ten
          p/php
          p/javascript
        output-format: sarif
        output-file: semgrep-results.sarif
        
    - name: Upload Semgrep results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep-results.sarif
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-results.sarif

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mysqli, pdo, pdo_mysql
        tools: composer
        
    - name: Install PHP dependencies
      run: |
        cd php
        composer install --no-dev --optimize-autoloader
        
    - name: Install ESLint and Prettier
      run: npm install --save-dev eslint prettier eslint-config-prettier eslint-plugin-prettier
      
    - name: Run ESLint
      run: npx eslint js/ --ext .js --format=compact
      
    - name: Run Prettier check
      run: npx prettier --check js/ *.html *.css
        
    - name: Lint JavaScript files
      run: |
        echo "Checking JavaScript syntax..."
        for file in js/*.js; do
          if [ -f "$file" ]; then
            echo "Linting $file"
            node -c "$file" || exit 1
          fi
        done
        
    - name: Lint PHP files
      run: |
        echo "Checking PHP syntax..."
        find php -name "*.php" -type f -exec php -l {} \; || exit 1
        
    - name: Check HTML files
      run: |
        echo "Checking HTML files..."
        for file in *.html; do
          if [ -f "$file" ]; then
            echo "Validating $file"
            # Basic HTML validation - check for common issues
            if grep -q "<html" "$file" && grep -q "</html>" "$file"; then
              echo "✓ $file has proper HTML structure"
            else
              echo "⚠ $file may have HTML structure issues"
            fi
          fi
        done
        
    - name: Check CSS files
      run: |
        echo "Checking CSS files..."
        for file in *.css; do
          if [ -f "$file" ]; then
            echo "Validating $file"
            # Basic CSS validation
            if grep -q "{" "$file" && grep -q "}" "$file"; then
              echo "✓ $file has CSS structure"
            else
              echo "⚠ $file may have CSS structure issues"
            fi
          fi
        done
    - name: Set Lint Job Status
      if: always()
      run: |
        echo "status=${{ job.status }}" >> $GITHUB_OUTPUT
      id: lint_status

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint, security]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: electraedge_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306
    outputs:
      total_tests: ${{ steps.parse_jest.outputs.total_tests }}
      passed_tests: ${{ steps.parse_jest.outputs.passed_tests }}
      failed_tests: ${{ steps.parse_jest.outputs.failed_tests }}
      coverage: ${{ steps.parse_jest.outputs.coverage }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mysqli, pdo, pdo_mysql
        tools: composer
        
    - name: Install PHP dependencies
      run: |
        cd php
        composer install --optimize-autoloader
        
    - name: Install Jest for JavaScript testing
      run: npm install --save-dev jest jsdom
        
    - name: Run JavaScript tests
      run: |
        echo "Running JavaScript tests..."
        npx jest --verbose
        
    - name: Test PHP syntax and basic functionality
      run: |
        echo "Testing PHP files..."
        # Test database connection
        php -r "
        try {
          \$pdo = new PDO('mysql:host=127.0.0.1;dbname=electraedge_test', 'test_user', 'test_password');
          echo 'Database connection test: PASSED\n';
        } catch (PDOException \$e) {
          echo 'Database connection test: FAILED - ' . \$e->getMessage() . '\n';
          exit(1);
        }
        "
        
    - name: Test Docker build
      run: |
        echo "Testing Docker build..."
        docker build -t test-php ./php
        echo "PHP Docker image built successfully"
        
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose version
        
    - name: Test Docker Compose
      run: |
        echo "Testing Docker Compose configuration..."
        docker-compose config
        echo "Docker Compose configuration is valid"
    - name: Run Jest with JSON and Coverage
      run: |
        npx jest --json --outputFile=jest-results.json --coverage --coverageReporters=json-summary
    - name: Parse Jest Results
      id: parse_jest
      run: |
        total=$(jq '.numTotalTests' jest-results.json)
        passed=$(jq '.numPassedTests' jest-results.json)
        failed=$(jq '.numFailedTests' jest-results.json)
        coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
        echo "total_tests=$total" >> $GITHUB_OUTPUT
        echo "passed_tests=$passed" >> $GITHUB_OUTPUT
        echo "failed_tests=$failed" >> $GITHUB_OUTPUT
        echo "coverage=$coverage" >> $GITHUB_OUTPUT
    - name: Set Test Job Status
      if: always()
      run: |
        echo "status=${{ job.status }}" >> $GITHUB_OUTPUT
      id: test_status

  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Build application
      run: |
        echo "Building application for performance testing..."
        # Add your build steps here if needed
        
    - name: Start application server
      run: |
        echo "Starting application server..."
        # Start your application server here
        # For now, we'll simulate with a simple server
        python3 -m http.server 8000 &
        sleep 10
        
    - name: Run Lighthouse CI
      run: |
        lhci autorun --config=./lighthouserc.json || true
        
    - name: Run basic load test
      run: |
        echo "Running basic load test..."
        # Install Apache Bench
        sudo apt-get update && sudo apt-get install -y apache2-utils
        
        # Run basic load test (if server is running)
        ab -n 100 -c 10 http://localhost:8000/ || echo "Load test completed"
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          .lighthouseci/
          lhci_reports/

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [security, lint, test, performance]
    if: always()
    steps:
      - name: Write Pipeline Summary
        run: |
          echo "**Workflow:** Enhanced CI/CD Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** $GITHUB_RUN_ID" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** $GITHUB_EVENT_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** $GITHUB_REF_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** $GITHUB_SHA" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** $GITHUB_ACTOR" >> $GITHUB_STEP_SUMMARY
          echo "**Started:** $(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠️ Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Total:** ${{ needs.test.outputs.total_tests }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed:** ${{ needs.test.outputs.passed_tests }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed:** ${{ needs.test.outputs.failed_tests }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** ${{ needs.test.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Security & Quality" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan:** SAST, Dependency Audit, Container Scan" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality:** ESLint, Prettier, PHP Syntax Check" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance:** Lighthouse CI, Load Testing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artifacts & Logs" >> $GITHUB_STEP_SUMMARY
          echo "- [View Full Logs]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Tab]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/security)" >> $GITHUB_STEP_SUMMARY
          echo "- [Performance Results](.lighthouseci/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏁 Final Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.security.result }}" = "success" ] && [ "${{ needs.lint.result }}" = "success" ] && [ "${{ needs.test.result }}" = "success" ]; then
            echo "✅ **All critical checks have passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some critical checks have failed. Please review the logs above.**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*For help, contact @devops or see [CI/CD Docs](#).*" >> $GITHUB_STEP_SUMMARY 