name: CI/CD Pipeline - Secure Software Development

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security & Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP Security Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run Semgrep Security Analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
          output-format: sarif
          output-file: semgrep-results.sarif

      - name: Upload Semgrep results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif

      - name: Run PHP Security Checker
        run: |
          composer install --no-dev --optimize-autoloader
          vendor/bin/security-checker security:check composer.lock
        working-directory: php

  # Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, mysql, pdo_mysql
          coverage: xdebug

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress
        working-directory: php

      - name: Run PHP CodeSniffer
        run: |
          composer require --dev squizlabs/php_codesniffer
          vendor/bin/phpcs --standard=PSR12 php/
        working-directory: php

      - name: Run PHP Mess Detector
        run: |
          composer require --dev phpmd/phpmd
          vendor/bin/phpmd php/ text cleancode,codesize,controversial,design,naming,unusedcode
        working-directory: php

      - name: Run PHPStan Static Analysis
        run: |
          composer require --dev phpstan/phpstan
          vendor/bin/phpstan analyse php/ --level=5
        working-directory: php

      - name: Check HTML validity
        run: |
          npm install -g html-validate
          html-validate *.html

      - name: Check CSS validity
        run: |
          npm install -g css-validator
          css-validator website.css

  # Unit and Integration Testing
  test:
    name: Automated Testing
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: electraedge_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, mysql, pdo_mysql
          coverage: xdebug

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress
        working-directory: php

      - name: Create test database
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -proot -e "CREATE DATABASE IF NOT EXISTS electraedge_test;"
          mysql -h 127.0.0.1 -P 3306 -u root -proot electraedge_test < electraedge.sql

      - name: Run PHPUnit tests
        run: |
          composer require --dev phpunit/phpunit
          vendor/bin/phpunit --testdox --coverage-text
        working-directory: php

      - name: Run JavaScript tests
        run: |
          npm install -g jest
          jest js/ --coverage

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Docker Security and Build
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push PHP image
        uses: docker/build-push-action@v5
        with:
          context: ./php
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Integration Testing with Docker
  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Docker Compose
        run: |
          docker-compose up -d
          sleep 30

      - name: Run integration tests
        run: |
          # Test database connection
          docker exec ssd_mysql mysql -u user -ppassword -e "USE electraedge; SHOW TABLES;"
          
          # Test web application accessibility
          curl -f http://localhost:8080 || exit 1
          
          # Test PHP functionality
          docker exec ssd_php php -l php/config.php

      - name: Stop Docker Compose
        if: always()
        run: docker-compose down

  # Deployment
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test, docker-build, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here
          # Example: rsync, scp, or cloud deployment commands
          
      - name: Notify deployment success
        run: |
          echo "âœ… Deployment successful!"
          # Add notification logic (Slack, email, etc.)

  # Security Compliance Report
  compliance-report:
    name: Generate Security Compliance Report
    runs-on: ubuntu-latest
    needs: [security-scan, docker-build]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate compliance report
        run: |
          echo "# Security Compliance Report" > compliance-report.md
          echo "Generated: $(date)" >> compliance-report.md
          echo "Branch: ${{ github.ref }}" >> compliance-report.md
          echo "Commit: ${{ github.sha }}" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "## Security Scans Completed" >> compliance-report.md
          echo "- OWASP ZAP Security Scan" >> compliance-report.md
          echo "- Semgrep Security Analysis" >> compliance-report.md
          echo "- PHP Security Checker" >> compliance-report.md
          echo "- Trivy Vulnerability Scanner" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "## Code Quality Checks" >> compliance-report.md
          echo "- PHP CodeSniffer (PSR-12)" >> compliance-report.md
          echo "- PHP Mess Detector" >> compliance-report.md
          echo "- PHPStan Static Analysis" >> compliance-report.md
          echo "- HTML Validation" >> compliance-report.md
          echo "- CSS Validation" >> compliance-report.md

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-report.md 