name: ElectraEdge CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Manual trigger option

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  # Security Scanning Job
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mysqli, pdo, pdo_mysql
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install PHP dependencies
        run: |
          cd php
          composer install --no-interaction --prefer-dist

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/php
          outputFormat: sarif
          outputFile: semgrep-results.sarif

      - name: Run PHP Security Checker
        run: |
          cd php
          composer security-check

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif

  # Code Quality Job
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mysqli, pdo, pdo_mysql

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install PHP dependencies
        run: |
          cd php
          composer install --no-interaction --prefer-dist

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run PHP CodeSniffer
        run: |
          cd php
          composer cs

      - name: Run PHP Mess Detector
        run: |
          cd php
          composer phpmd

      - name: Run PHPStan
        run: |
          cd php
          composer phpstan

      - name: Run ESLint
        run: npm run lint

  # Testing Job
  testing:
    name: Testing
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: electraedge_test
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mysqli, pdo, pdo_mysql
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install PHP dependencies
        run: |
          cd php
          composer install --no-interaction --prefer-dist

      - name: Install Node.js dependencies
        run: npm ci

      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"3306" --silent; do
            sleep 1
          done

      - name: Setup test database
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -proot electraedge_test < electraedge.sql

      - name: Run PHP tests
        run: |
          cd php
          composer test
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: electraedge_test
          DB_USER: root
          DB_PASSWORD: root

      - name: Run JavaScript tests
        run: npm test

      - name: Generate test coverage report
        run: |
          cd php
          composer test-coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./php/coverage/coverage.xml
          flags: php
          name: php-coverage

  # Container Security Job
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t electraedge:test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'electraedge:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

  # Build and Deploy Job (only on main branch)
  build-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, testing, container-security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/electraedge:latest
            ${{ secrets.DOCKER_USERNAME }}/electraedge:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create deployment evidence
        run: |
          echo "## 🚀 Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pipeline Stages Completed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security Scanning" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code Quality Checks" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Testing" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Container Security" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker Build & Push" >> $GITHUB_STEP_SUMMARY

  # Pipeline Summary Job
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, testing, container-security]
    if: always()
    steps:
      - name: Create pipeline summary
        run: |
          echo "## 🔍 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Testing: ${{ needs.testing.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Container Security: ${{ needs.container-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Evidence of Automated Trigger:" >> $GITHUB_STEP_SUMMARY
          echo "This pipeline was automatically triggered by GitHub Actions on $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "All security checks, tests, and quality gates have been executed successfully." >> $GITHUB_STEP_SUMMARY 